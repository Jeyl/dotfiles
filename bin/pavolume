#!/usr/bin/python

import sys
from subprocess import check_output
import argparse


## Call a process (with arguments) an return it's cleand STDOUT output
def sh(args):
	return check_output(args).decode("UTF-8")[:-1]


def gammaAdd(i, delta, gamma, upperLimit):
	i = i / upperLimit
	i = i ** (1/gamma)
	
	i = i + delta
	if i > 1:
		return upperLimit
	
	if i < 0:
		return 0
	
	i = i ** gamma
	i = i * upperLimit
	
	return int(i)


class PA:
	def __init__(self):
		self.read()
	
	def read(self):
		state = 0
		
		output = sh(["pacmd", "dump"]).split("\n")
		output.reverse()
		
		
		for line in output:
			if len(line) == 0:
				continue
			
			parts = line.split()
			
			if parts[0] == "set-default-sink":
				self.__device = parts[1]
			
			elif parts[0] == "set-sink-mute" and parts[1] == self.__device:
				self.__mute = (parts[2] == "yes")
				state |= 1
				if state == 3:
					return self
			
			elif parts[0] == "set-sink-volume" and parts[1] == self.__device:
				self.__volume = int(parts[2], 16)
				state |= 2
				if state == 3:
					return self
		
		raise Exception("Can't parse 'pacmd dump' output (state %i)" % state)
	
	@property
	def mute(self):
		return self.__mute
	
	@mute.setter
	def mute(self, mute = True):
		if mute != self.__mute:
			if mute:
				sh(["pactl", "set-sink-mute", self.__device, "yes"])
			else:
				sh(["pactl", "set-sink-mute", self.__device, "no"])
			
			self.__mute = mute
	
	
	@property
	def volume(self):
		return self.__volume
	
	@volume.setter
	def volume(self, volume):
		if volume != self.__volume:
			sh(["pactl", "set-sink-volume", self.__device, "0x%x" % volume])
			
			self.__volume = volume
		
		return self




parser = argparse.ArgumentParser(description='Process some integers.')
parser.add_argument("-g", "--gamma", default=2.2, type=float, help="The gamma value")
parser.add_argument("-s", "--steps", default=15, type=int, help="The numer of steps")
parser.add_argument("action", choices=["up", "down", "mute"], help="The gamma value")

args = parser.parse_args()

pa = PA()
if args.action == "up":
	pa.volume = gammaAdd(pa.volume, 1/args.steps, args.gamma, 0xFFFF)
	pa.mute = (pa.volume == 0)

elif args.action == "down":
	pa.volume = gammaAdd(pa.volume, -1/args.steps, args.gamma, 0xFFFF)
	pa.mute = (pa.volume == 0)

elif args.action == "mute":
	pa.mute = not pa.mute
