## Try this: http://packages.debian.org/unstable/admin/molly-guard
# This script creates a fancy promt for bash.
# To try it out, use "source promt.sh"

function __git_ps1 {
	# Do nothing, so no error will occur on systems without git
	true
}

if [ -f /usr/share/git/completion/git-completion.bash ]
then
	source /usr/share/git/completion/git-completion.bash
	GIT_PS1_SHOWDIRTYSTATE=yep
	GIT_PS1_SHOWSTASHSTATE=yep
fi

function commpilePromt {
	# Calculate the remaining space, considering the length of invisible color
	# codes passed as first argument
	let pRemainingSpace=$COLUMNS-${#pLeftPart}-${#pRightPart}+${1}
	
	if [[ ${1} == 0 || "${pRemainingSpace}" -ge 0 ]]
	then
		# If we have enough space left, fill it and return successfully
		pFill="$(perl -e "print('─'x${pRemainingSpace});")"
		
		# Define the "normal" promt
		PS1="${pNotice}${pLeftPart}${pFill}${pRightPart}\n${pLineC}└─${pPromtC}>>${pNormalC} "
		return 0
	else
		# If we haven't enough space left, return unsuccessfully
		return 1
	fi
}



function createPromt {
	# == Create a notice if last command failed
	local returncode=$?
	
	# Workaround: We need a character after the "\n" to be recognized by PS1,
	# therefore we take the color code of the next line as our last bit.
	if [[ "${returncode}" == 0 ]]
	then
		pNotice="${pLineC}"
	else
		pNotice="$(echo -ne "${pFailedNoticeC}The last command FAILED" \
			"with the exit code ${returncode}\n${pLineC}")"
	fi
	
	
	
	# == Find out wether we are on a remote machine
	if [ "$SSH_CONNECTION" ]
	then
		pHostC=${pHostRemoteC}
	else
		pHostC=${pHostLocalC}
	fi
	
	
	
	# == Set title if terminal is xterm (from ubuntu .bashrc)
	case "$TERM" in
	xterm*|rxvt*)
		echo -ne "\033]0;${fqdn} - ${USER}: ${pwd}\007"
	;;
	
	*)
	;;
	esac
	
	
	# == Try if the promt is long enough. otherwise short it
	# ---- 1. try: full promt
	# replaces $HOME dir with ~ ; dir level 3
	local git="$(__git_ps1 " (%s)")"
	local pwd="$(echo "${PWD/#$HOME/~}" | sed  's/.*\/\(.*\/.*\/.*\)$/\1/')"
	local time="$(date +%T)"
	if [ -x /bin/hostname ]
	then
		pHost="$(hostname --long)"
	else
		pHost="$(cat /proc/sys/kernel/hostname)"
	fi
	local fqdn="$pHost"
	
	pLeftPart="${pLineC}┌───────┤${pHostC} ${pHost} ${pLineC}├───────┤${pPwdC} ${pwd}${git} ${pLineC}├"
	pRightPart="───────┤${pTimeC} ${time} ${pLineC}├────"
	
	commpilePromt 77 && return 0
	
	# ---- 2. try: no clock
	pRightPart=""
	commpilePromt 55 && return 0
	
	# ---- 3. try: only hostname
	if [ -x /bin/hostname ]
	then
		pHost="$(hostname --short)"
	else
		pHost="$(cut -d. -f1 /proc/sys/kernel/hostname)"
	fi
	pLeftPart="${pLineC}┌───────┤${pHostC} ${pHost} ${pLineC}├───────┤${pPwdC} ${pwd}${git} ${pLineC}├"
	commpilePromt 55 && return 0
	
	# ---- 4. try: no git
	git=0
	pLeftPart="${pLineC}┌───────┤${pPwdC} ${pwd} ${pLineC}├"
	commpilePromt 33 && return 0
	
	# ---- 5. try: only pwd
	pLeftPart="${pLineC}┌───────┤${pPwdC} ${pwd} ${pLineC}├"
	commpilePromt 33 && return 0
	
	# ---- 7. try: fall back, no graphical gimmicks
	pLeftPart="${pPwdC}${pwd}"
	pFill=""
	commpilePromt 0
	
	history -a
	history -n
}



# Define static things only once here at beginning, not at each promt creation!

# == colors
# ---- define

pNormalC=$(echo -e "\[\033[m\]")
pLineC=$(echo -e "\[\033[0;36m\]")
pRootC=$(echo -e "\[\033[1;31m\]")
pRemoteC=$(echo -e "\[\033[1;35m\]")
pUserC=$(echo -e "\[\033[1;32m\]")
pTextC=$(echo -e "\[\033[1;33m\]")
pHostLocalC=$pTextC
pHostRemoteC=$pRemoteC
pPwdC=$pTextC
pTimeC=$pTextC
pFailedNoticeC=$(echo -e "\[\033[1;31m\]")


# ---- select depending on user

if [[ "$UID" == 0 ]]
then
	pPromtC="${pRootC}"
else
	pPromtC="${pUserC}"
fi


# == The rest of definitions

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# Prevent that multiple bash instances overwrite the readline history of each
# other.
shopt -s histappend

export HISTCONTROL=ignoredups,erasedups
export HISTSIZE=2000
export HISTFILESIZE=2000


# This function will be called before PS1 is evaluated
PROMPT_COMMAND=createPromt

# Define the promt for multi line commands
PS2="  ${pPromtC}>>${pNormalC} "
